{"version":3,"sources":["components/Input.jsx","components/Task.jsx","App.js","serviceWorker.js","index.js"],"names":["Input","props","list","setList","task","name","isComplete","className","onChange","e","target","value","type","onClick","Task","index","htmlFor","checked","filter","indexOf","App","useState","style","width","map","i","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qMAkCeA,EAhCD,SAACC,GAAW,IACdC,EAAkBD,EAAlBC,KAAMC,EAAYF,EAAZE,QACZC,EAAO,CACVC,KAAM,GACNC,YAAY,GAaX,OACI,yBAAKC,UAAU,kBACb,2BACEC,SAbS,SAACC,GAChBL,EAAKC,KAAOI,EAAEC,OAAOC,OAanBJ,UAAU,eACNK,KAAK,OACLP,KAAK,SAEP,4BAAQE,UAAU,iCACtBM,QAfY,SAACJ,GAChBN,EAAQ,GAAD,mBAAKD,GAAL,CAAWE,KAClBK,EAAEC,OAAOC,MAAQ,KAYV,cCQKG,EAjCF,SAACb,GAAW,IACbG,EAA+BH,EAA/BG,KAAMW,EAAyBd,EAAzBc,MAAOb,EAAkBD,EAAlBC,KAAMC,EAAYF,EAAZE,QAa3B,OACI,yBAAKI,UAAU,0BACX,gCAAOH,EAAKC,KAAZ,KACA,yBAAKE,UAAU,aACX,2BAAOS,QAAQ,YAAf,cACA,2BACAR,SAXO,WACfN,EAAKa,GAAOT,YAAcJ,EAAKa,GAAOT,WACtCH,EAAQ,YAAID,KAUJU,KAAK,WACLK,QAASb,EAAKE,aAEd,4BACAO,QAtBI,WACZV,GAAQ,WACN,OAAOD,EAAKgB,QAAO,SAAAd,GAAI,OAAIF,EAAKiB,QAAQf,KAAUW,SAqB5CR,UAAU,yBAFV,QCCDa,MAvBf,WAAgB,IAAD,EAEUC,mBAAS,IAFnB,mBAEPnB,EAFO,KAEDC,EAFC,KAGb,OACE,yBAAKI,UAAU,gBAAgBe,MAAO,CAAEC,MAAO,UAC3CrB,EAAKsB,KAAI,SAACpB,EAAMqB,GAAP,OACT,kBAAC,EAAD,CACArB,KAAaqB,EACbtB,QAAUA,EACVY,MAAQU,EACRvB,KAAOA,OAGT,kBAAC,EAAD,CACEA,KAAOA,EACPC,QAAUA,MCPEuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.a5d67ee4.chunk.js","sourcesContent":["import React from 'react';\n\nconst Input = (props) => {\n    const { list, setList } = props;\n\t\tlet task = {\n\t\t\tname: \"\",\n\t\t\tisComplete: false\n\t\t};\n\n    const onChange = (e) => {\n      task.name = e.target.value;\n\t\t}\n\t\t\n\t\tconst onClick = (e) => {\n\t\t\tsetList([...list, task]);\n\t\t\te.target.value = \"\";\n\t\t\t\n\t\t}\n\n    return (\n        <div className=\"container w-50\">\n          <input \n            onChange={ onChange }\n\t\t\t\t    className=\"form-control\"\n            type=\"text\" \n            name=\"task\"\n          /> \n          <button className=\"btn btn-primary btn-block mt-1\"\n\t\t\t\t\t\tonClick={ onClick }\n          >Add Task</button>\n        </div>\n    );\n}\n\nexport default Input;","import React from 'react';\n\nconst Task = (props) => {\n    const { task, index, list, setList } = props;\n\n    const onClick = () => {\n        setList(() => { \n          return list.filter(task => list.indexOf(task) !== index); /* any tasks not = to index position brought thru by props do not take out */\n        });\n      };\n\n      const onChange = () => {\n        list[index].isComplete = !list[index].isComplete;\n        setList([...list]);\n      }\n\n    return(\n        <div className=\"container bg-secondary\">\n            <h4> { task.name } </h4>\n            <div className=\"container\">\n                <label htmlFor=\"checkbox\">Completed?</label>\n                <input \n                onChange = { onChange }\n                type=\"checkbox\" \n                checked={task.isComplete}\n                />\n                <button \n                onClick = { onClick }\n                className=\"btn btn-sm btn-danger\"\n                >X</button>\n            </div>\n        </div>\n    )\n}\n\nexport default Task;","import React, {useState} from 'react';\nimport Input from './components/Input';\nimport Task from './components/Task';\n\nfunction App() {\n  \n  const[list, setList] = useState([]);\n  return (\n    <div className=\"App container\" style={{ width: \"800px\" }}>\n      { list.map((task, i) => (\n        <Task \n        task={ task, i } \n        setList={ setList }  \n        index={ i } \n        list={ list } \n        />\n      ))}\n      <Input \n        list={ list } \n        setList={ setList } \n      />\n    </div>\n      \n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}